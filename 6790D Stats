from lsst.daf.persistence import Butler
import numpy as np
import lsst.afw.display as afwDisplay 
import matplotlib.pyplot as plt 
import lsst.ip.isr as isr
import statistics as stat
import pandas as pd
afwDisplay.setDefaultBackend('matplotlib')
%matplotlib inline

# Want a function that: when sensor, run, amp, etc called- gives data for multiple statistical subplots

def errbar_subplot_magic(run, raftName, detectorName):
    def bias_isr(raw, overscan_correct=True):
        raw_clone = raw.clone()
        task = isr.isrTask.IsrTask()
        task.config.doAssembleCcd = True
        task.assembleCcd.config.doTrim = True
        task.config.overscanFitType = 'MEDIAN_PER_ROW'
        task.config.doOverscan = overscan_correct
        task.config.doBias = False
        task.config.doLinearize = False
        task.config.doDark = False
        task.config.doFlat = False
        task.config.doDefect = False
        assembled = task.run(raw_clone).exposure
        return assembled.getImage()
    
    imageType = 'FLAT'
    repo = '/lsstdata/offline/teststand/BOT/gen2repo/'
    butler = Butler(repo)
    dataId = dict(detectorName=detectorName, run=run, imageType=imageType, raftName=raftName)
    expIds = butler.queryMetadata('raw', 'visit', dataId=dataId)
    expId = expIds[0] 
    dataId['visit'] = expId
    exp = butler.get('raw', dataId)
    ccd = exp.getDetector()
    amp = ccd[0]
    
    dataBBox = amp.getRawDataBBox()
    oscanBBox = amp.getRawHorizontalOverscanBBox()
    overscanImage = exp.maskedImage[oscanBBox]
    overscanArray = overscanImage.image.array
    overscanArraysq = overscanArray ** 2
    ampImage = exp.maskedImage[dataBBox]
    
    imArray = ampImage.image.array
    imArraysq = imArray ** 2

    Array = Array = np.hstack((imArray, overscanArray))

    std = np.std(Array, axis=0) 
#     print(std.shape)
#     print(std[-100:])
#     print()

    mean = np.mean(Array, axis=0)
#     print(mean[-100:])
#     print()

#     plt.imshow(Array)
    fig = plt.figure(figsize=(30,20))
    plt.errorbar(np.arange(len(mean)), mean, yerr=std, ecolor='red', capsize=2, errorevery=1)
#     plt.xlim(500, 580)
#     plt.ylim(24000, 26000)
    plt.xlabel('Pixel Value', fontsize=20)
    plt.ylabel('ADU Counts', fontsize=20)
    plt.title("6790D Mean Pixel Number vs ADU Counts for sensor " f"{detectorName}", fontsize=30)
    plt.xlabel('Pixel Value', fontsize=20)
    plt.ylabel('ADU Counts', fontsize=20)
    plt.savefig('errbar_subplot_magic(run, raftName, detectorName).png', dpi=300, bbox_inches='tight')
    
#     plt.savefig(errbar_subplot_magic(run, raftName, detectorName))
#     from matplotlib.backends.backend_pdf import PdfPages
#     pp = PdfPages('err_subplots.pdf')
#     pp.savefig()
#     pp.close()
#     plt.savefig('err_subplots.jpg')
#     Image.open('err_subplots.png').save('err_subplots.jpg','JPEG')
    plt.show()
    return
    
errbar_subplot_magic('6790D', 'R01', 'S00')
errbar_subplot_magic('6790D', 'R01', 'S10')
errbar_subplot_magic('6790D', 'R01', 'S20')
